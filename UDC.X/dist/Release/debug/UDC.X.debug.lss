
dist/Release/debug/UDC.X.debug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3a  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c30  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bb  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000023f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059f  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000259  00000000  00000000  00002a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e3       	ldi	r30, 0x36	; 54
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 30       	cpi	r26, 0x09	; 9
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  e2:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_init>:
#include "UDC.X/Delay.h"

void _init()
{
    //initialize
    ADRF_DAC_INIT();
  ea:	0e 94 c2 00 	call	0x184	; 0x184 <ADRF_DAC_INIT>
	USART_INIT(51);
  ee:	83 e3       	ldi	r24, 0x33	; 51
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <USART_INIT>

000000f6 <main>:
}
int main(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	2a 97       	sbiw	r28, 0x0a	; 10
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
    char Rx_Buffer[SPI_DATA_LENGTH];
    char *Rx_String = "";
    int Rx_CNT = 0;
    
	_init();
 10a:	0e 94 75 00 	call	0xea	; 0xea <_init>
}
int main(void)
{
    char Rx_Buffer[SPI_DATA_LENGTH];
    char *Rx_String = "";
    int Rx_CNT = 0;
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	10 e0       	ldi	r17, 0x00	; 0
    //Transmit_Config_Data_2_DAC();
    //Transmit_Config_Data_2_DAC_with_arg(0xCDCC);
    
    while(1)
    {
        Rx_Buffer[Rx_CNT++] = PC_Transmit_2_USART();
 112:	78 01       	movw	r14, r16
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	e8 1a       	sub	r14, r24
 118:	f8 0a       	sbc	r15, r24
 11a:	0e 94 06 01 	call	0x20c	; 0x20c <PC_Transmit_2_USART>
 11e:	e6 e0       	ldi	r30, 0x06	; 6
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ec 0f       	add	r30, r28
 124:	fd 1f       	adc	r31, r29
 126:	e0 0f       	add	r30, r16
 128:	f1 1f       	adc	r31, r17
 12a:	80 83       	st	Z, r24
        char T1_DATA[SPI_DATA_LENGTH] = "asdfg";
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	de 01       	movw	r26, r28
 134:	11 96       	adiw	r26, 0x01	; 1
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	8a 95       	dec	r24
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x40>
        if(Rx_CNT==SPI_DATA_LENGTH)
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	e8 16       	cp	r14, r24
 142:	f1 04       	cpc	r15, r1
 144:	e9 f4       	brne	.+58     	; 0x180 <main+0x8a>
        {
            Rx_CNT = 0;
            memcpy(Rx_String,Rx_Buffer,SPI_DATA_LENGTH);
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	fe 01       	movw	r30, r28
 14a:	36 96       	adiw	r30, 0x06	; 6
 14c:	a6 e0       	ldi	r26, 0x06	; 6
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	8a 95       	dec	r24
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x5a>
            USART_Transmit_2_PC_STR(Rx_Buffer);
 158:	ce 01       	movw	r24, r28
 15a:	06 96       	adiw	r24, 0x06	; 6
 15c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_Transmit_2_PC_STR>
            //USART_Transmit_2_PC_STR(T1_DATA);
            if(strcmp(Rx_Buffer,T1_DATA)==0)
 160:	be 01       	movw	r22, r28
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	ce 01       	movw	r24, r28
 168:	06 96       	adiw	r24, 0x06	; 6
 16a:	0e 94 10 01 	call	0x220	; 0x220 <strcmp>
 16e:	89 2b       	or	r24, r25
 170:	11 f4       	brne	.+4      	; 0x176 <main+0x80>
                USART_Transmit_2_PC_CHAR('A'); //A 이렇게 받아진다.
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	01 c0       	rjmp	.+2      	; 0x178 <main+0x82>
            else
                USART_Transmit_2_PC_CHAR('C'); //C
 176:	83 e4       	ldi	r24, 0x43	; 67
 178:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit_2_PC_CHAR>
    {
        Rx_Buffer[Rx_CNT++] = PC_Transmit_2_USART();
        char T1_DATA[SPI_DATA_LENGTH] = "asdfg";
        if(Rx_CNT==SPI_DATA_LENGTH)
        {
            Rx_CNT = 0;
 17c:	e1 2c       	mov	r14, r1
 17e:	f1 2c       	mov	r15, r1
            else
                USART_Transmit_2_PC_CHAR('C'); //C
            
            //USART_Transmit_2_PC(Rx_Buffer[Rx_CNT-1]);
        }
    }
 180:	87 01       	movw	r16, r14
 182:	c7 cf       	rjmp	.-114    	; 0x112 <main+0x1c>

00000184 <ADRF_DAC_INIT>:
void ADRF_DAC_INIT()
{
    ///////////ADRF////////////////
    
    //OUTPUT
    ADRF_CS_Dir; //CS PIN is OUTPUT 
 184:	25 9a       	sbi	0x04, 5	; 4
    ADRF_RST_Dir; //RST PIN is OUTPUT 
 186:	57 9a       	sbi	0x0a, 7	; 10
    ADRF_SCLK_Dir; //SCLK PIN is OUTPUT 
 188:	6e 9a       	sbi	0x0d, 6	; 13
    ADRF_SDIO_Dir_OUT; //SDIO PIN is OUTPUT 
 18a:	24 9a       	sbi	0x04, 4	; 4
    
    //Idle
    ADRF_CS_H; //CS PIN is HIGH
 18c:	2d 9a       	sbi	0x05, 5	; 5
    ADRF_SCLK; //SCLK PIN is LOW at first
 18e:	76 98       	cbi	0x0e, 6	; 14
    ADRF_SDIO; //SDIO PIN is LOW
 190:	2c 98       	cbi	0x05, 4	; 5
	
    ///////////////DAC////////////////
	//OUTPUT
    DAC_CS_Dir; //CS PIN is OUTPUT 
 192:	21 9a       	sbi	0x04, 1	; 4
    DAC_LDAC_Dir; //RST PIN is OUTPUT 
 194:	26 9a       	sbi	0x04, 6	; 4
    DAC_SCLK_Dir; //SCLK PIN is OUTPUT 
 196:	23 9a       	sbi	0x04, 3	; 4
    DAC_SDIO_Dir_OUT; //SDIO PIN is OUTPUT 
 198:	22 9a       	sbi	0x04, 2	; 4
    
    //Idle
    DAC_CS_H; //CS PIN is HIGH
 19a:	29 9a       	sbi	0x05, 1	; 5
    DAC_SCLK; //SCLK PIN is LOW at first
 19c:	2b 98       	cbi	0x05, 3	; 5
    DAC_SDIO; //SDIO PIN is LOW
 19e:	2a 98       	cbi	0x05, 2	; 5
	DAC_LDAC_H; //LDAC PIN is HIGH    
 1a0:	2e 9a       	sbi	0x05, 6	; 5
 1a2:	08 95       	ret

000001a4 <USART_INIT>:
#include "_USART_Com.h"
#include "DefineScript.h"

void USART_INIT(unsigned int baud)
{
	UBRR1H = (unsigned char)(baud>>8);
 1a4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    UBRR1L = (unsigned char)baud;
 1a8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1); // TX, RX ENB
 1ac:	88 e1       	ldi	r24, 0x18	; 24
 1ae:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 1b2:	08 95       	ret

000001b4 <USART_Transmit_2_PC_CHAR>:
	//8bit, 1stopbit
}
void USART_Transmit_2_PC_CHAR(char data)
{
	while(!(UCSR1A&(1<<UDRE1)));
 1b4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1b8:	95 ff       	sbrs	r25, 5
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <USART_Transmit_2_PC_CHAR>
	
	UDR1 = data;
 1bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1c0:	08 95       	ret

000001c2 <USART_Transmit_2_PC_STR>:
}
void USART_Transmit_2_PC_STR(char *data)
{
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	8c 01       	movw	r16, r24
	int i=0;
	while(i++<((strlen(data)<(SPI_DATA_LENGTH+2))?(strlen(data)+2):(strlen(data)-2)))//-2 is \r
 1cc:	ec 01       	movw	r28, r24
 1ce:	fe 01       	movw	r30, r28
 1d0:	9e 01       	movw	r18, r28
 1d2:	20 1b       	sub	r18, r16
 1d4:	31 0b       	sbc	r19, r17
 1d6:	de 01       	movw	r26, r28
 1d8:	0d 90       	ld	r0, X+
 1da:	00 20       	and	r0, r0
 1dc:	e9 f7       	brne	.-6      	; 0x1d8 <USART_Transmit_2_PC_STR+0x16>
 1de:	11 97       	sbiw	r26, 0x01	; 1
 1e0:	cd 01       	movw	r24, r26
 1e2:	8c 1b       	sub	r24, r28
 1e4:	9d 0b       	sbc	r25, r29
 1e6:	87 30       	cpi	r24, 0x07	; 7
 1e8:	91 05       	cpc	r25, r1
 1ea:	10 f4       	brcc	.+4      	; 0x1f0 <USART_Transmit_2_PC_STR+0x2e>
 1ec:	02 96       	adiw	r24, 0x02	; 2
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <USART_Transmit_2_PC_STR+0x30>
 1f0:	02 97       	sbiw	r24, 0x02	; 2
 1f2:	28 17       	cp	r18, r24
 1f4:	39 07       	cpc	r19, r25
 1f6:	28 f4       	brcc	.+10     	; 0x202 <USART_Transmit_2_PC_STR+0x40>
 1f8:	21 96       	adiw	r28, 0x01	; 1
        USART_Transmit_2_PC_CHAR(*data++);
 1fa:	80 81       	ld	r24, Z
 1fc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit_2_PC_CHAR>
 200:	e6 cf       	rjmp	.-52     	; 0x1ce <USART_Transmit_2_PC_STR+0xc>
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	08 95       	ret

0000020c <PC_Transmit_2_USART>:
char PC_Transmit_2_USART()
{
    while(!(UCSR1A&(1<<RXC1)));
 20c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 210:	87 ff       	sbrs	r24, 7
 212:	fc cf       	rjmp	.-8      	; 0x20c <PC_Transmit_2_USART>
    Rx_Flag = 1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
    return UDR1;
 21a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 21e:	08 95       	ret

00000220 <strcmp>:
 220:	fb 01       	movw	r30, r22
 222:	dc 01       	movw	r26, r24
 224:	8d 91       	ld	r24, X+
 226:	01 90       	ld	r0, Z+
 228:	80 19       	sub	r24, r0
 22a:	01 10       	cpse	r0, r1
 22c:	d9 f3       	breq	.-10     	; 0x224 <strcmp+0x4>
 22e:	99 0b       	sbc	r25, r25
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
